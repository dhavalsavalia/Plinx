from webob import Request, Response


class Middleware:
    """
    Base class for all Plinx middleware components.

    The middleware system in Plinx follows a nested pattern where each middleware
    wraps the application or another middleware component. This allows for a chain
    of processing both before a request reaches the application and after the
    application generates a response.

    Middleware classes should inherit from this base class and override the
    `process_request` and `process_response` methods to implement custom behavior.

    The middleware execution flow works like this:
    1. Client request comes in
    2. Each middleware's `process_request` is called from outermost to innermost
    3. The application handles the request
    4. Each middleware's `process_response` is called from innermost to outermost
    5. The response is sent back to the client

    Examples:
        ```python
        class LoggingMiddleware(Middleware):
            def process_request(self, request):
                print(f"Request: {request.path}")

            def process_response(self, request, response):
                print(f"Response: {response.status_code}")

        app = Plinx()
        app.add_middleware(LoggingMiddleware)
        ```

        Middleware that modifies the request or response:

        ```python
        class AuthMiddleware(Middleware):
            def process_request(self, request):
                request.user = None
                auth_header = request.headers.get("Authorization", "")
                if auth_header.startswith("Bearer "):
                    token = auth_header[7:]
                    request.user = self.get_user_from_token(token)

            def get_user_from_token(self, token):
                # Implementation to validate token and return user
                pass
        ```
    """

    def __init__(
        self,
        app,
    ):
        """
        Initialize the middleware with a WSGI application.

        Args:
            app: A WSGI application (typically a Plinx instance or another middleware)
        """
        self.app = app

    def __call__(
        self,
        environ: dict,
        start_response: callable,
    ):
        """
        WSGI callable interface for the middleware.

        This method makes middleware instances callable according to the WSGI spec,
        allowing them to be used in a WSGI server. It creates a Request object,
        passes it to the application's handle_request method, and returns the
        response.

        Args:
            environ: The WSGI environment dictionary
            start_response: The WSGI start_response callable

        Returns:
            An iterable of bytes representing the response body
        """
        request = Request(environ)

        response = self.app.handle_request(request)

        return response(environ, start_response)

    def add(
        self,
        middleware_cls,
    ):
        """
        Add a new middleware to the stack.

        This method creates an instance of the provided middleware class,
        passing the current middleware instance (or application) as the app parameter.
        This builds up a chain of nested middleware instances.

        Args:
            middleware_cls: A class inheriting from Middleware
        """
        self.app = middleware_cls(self.app)

    def process_request(
        self,
        request: Request,
    ):
        """
        Process the request before it reaches the application.

        Override this method in your middleware subclass to modify or inspect
        the request before it's handled by the application or the next middleware.

        Args:
            request: The WebOb Request object
        """
        pass  # pragma: no cover

    def process_response(
        self,
        request: Request,
        response: Response,
    ):
        """
        Process the response after it's generated by the application.

        Override this method in your middleware subclass to modify or inspect
        the response before it's returned to the client or the previous middleware.

        Args:
            request: The WebOb Request object that generated this response
            response: The Response object to be returned
        """
        pass  # pragma: no cover

    def handle_request(self, request: Request):
        """
        Process a request through this middleware and the wrapped application.

        This method implements the middleware chain by:
        1. Calling this middleware's process_request method
        2. Passing the request to the wrapped application/middleware
        3. Calling this middleware's process_response method with the response

        Args:
            request: The WebOb Request object

        Returns:
            The Response object after processing
        """
        self.process_request(request)
        response = self.app.handle_request(request)
        self.process_response(request, response)

        return response
